# sage: aes_gen_tc('word_xor',reps=100)
# Setting seed to 0

r a b
[153, 173, 184, 65] [28, 131, 11, 85] [133, 46, 179, 20]
r a b
[197, 73, 60, 187] [227, 148, 225, 197] [38, 221, 221, 126]
r a b
[171, 153, 197, 127] [193, 124, 103, 215] [106, 229, 162, 168]
r a b
[97, 176, 8, 16] [166, 78, 144, 234] [199, 254, 152, 250]
r a b
[140, 10, 223, 206] [66, 26, 68, 54] [206, 16, 155, 248]
r a b
[55, 11, 37, 49] [231, 198, 240, 43] [208, 205, 213, 26]
r a b
[129, 235, 218, 140] [176, 102, 15, 237] [49, 141, 213, 97]
r a b
[249, 168, 78, 152] [137, 155, 50, 243] [112, 51, 124, 107]
r a b
[223, 196, 27, 114] [182, 214, 109, 222] [105, 18, 118, 172]
r a b
[242, 234, 134, 128] [249, 192, 85, 137] [11, 42, 211, 9]
r a b
[48, 192, 15, 162] [21, 230, 169, 167] [37, 38, 166, 5]
r a b
[167, 249, 224, 111] [106, 234, 6, 14] [205, 19, 230, 97]
r a b
[138, 240, 28, 81] [199, 123, 123, 10] [77, 139, 103, 91]
r a b
[161, 240, 115, 222] [187, 218, 35, 238] [26, 42, 80, 48]
r a b
[78, 92, 51, 182] [36, 249, 219, 193] [106, 165, 232, 119]
r a b
[64, 180, 116, 108] [54, 38, 221, 103] [118, 146, 169, 11]
r a b
[176, 2, 246, 71] [89, 20, 101, 88] [233, 22, 147, 31]
r a b
[27, 123, 164, 25] [6, 183, 38, 199] [29, 204, 130, 222]
r a b
[137, 203, 104, 120] [235, 23, 229, 219] [98, 220, 141, 163]
r a b
[208, 6, 92, 114] [141, 51, 77, 137] [93, 53, 17, 251]
r a b
[144, 148, 80, 155] [55, 21, 8, 162] [167, 129, 88, 57]
r a b
[80, 68, 43, 58] [214, 40, 51, 169] [134, 108, 24, 147]
r a b
[185, 3, 174, 51] [31, 5, 202, 225] [166, 6, 100, 210]
r a b
[5, 240, 123, 232] [149, 193, 34, 81] [144, 49, 89, 185]
r a b
[15, 71, 31, 28] [215, 204, 61, 160] [216, 139, 34, 188]
r a b
[193, 60, 250, 67] [245, 10, 121, 48] [52, 54, 131, 115]
r a b
[209, 158, 252, 111] [68, 150, 203, 54] [149, 8, 55, 89]
r a b
[176, 19, 69, 186] [87, 87, 121, 137] [231, 68, 60, 51]
r a b
[146, 69, 100, 68] [17, 199, 36, 91] [131, 130, 64, 31]
r a b
[9, 160, 214, 95] [125, 23, 208, 181] [116, 183, 6, 234]
r a b
[217, 158, 236, 167] [207, 21, 220, 228] [22, 139, 48, 67]
r a b
[68, 59, 120, 125] [30, 4, 240, 203] [90, 63, 136, 182]
r a b
[115, 218, 154, 111] [100, 162, 198, 191] [23, 120, 92, 208]
r a b
[118, 222, 103, 145] [110, 27, 104, 192] [24, 197, 15, 81]
r a b
[164, 53, 30, 211] [62, 61, 115, 68] [154, 8, 109, 151]
r a b
[110, 110, 91, 203] [28, 76, 242, 147] [114, 34, 169, 88]
r a b
[118, 86, 238, 61] [5, 162, 192, 1] [115, 244, 46, 60]
r a b
[35, 10, 215, 46] [119, 71, 237, 224] [84, 77, 58, 206]
r a b
[160, 134, 79, 241] [147, 156, 184, 76] [51, 26, 247, 189]
r a b
[66, 237, 194, 172] [192, 40, 25, 35] [130, 197, 219, 143]
r a b
[46, 75, 186, 240] [150, 65, 238, 240] [184, 10, 84, 0]
r a b
[85, 97, 234, 1] [29, 195, 159, 163] [72, 162, 117, 162]
r a b
[119, 71, 181, 123] [189, 154, 148, 208] [202, 221, 33, 171]
r a b
[58, 86, 141, 72] [116, 127, 124, 113] [78, 41, 241, 57]
r a b
[127, 183, 172, 177] [115, 148, 104, 89] [12, 35, 196, 232]
r a b
[116, 41, 153, 245] [200, 145, 36, 73] [188, 184, 189, 188]
r a b
[209, 101, 58, 228] [35, 113, 89, 55] [242, 20, 99, 211]
r a b
[253, 146, 181, 6] [254, 238, 201, 27] [3, 124, 124, 29]
r a b
[220, 108, 73, 251] [115, 233, 34, 60] [175, 133, 107, 199]
r a b
[2, 224, 97, 250] [108, 100, 102, 23] [110, 132, 7, 237]
r a b
[100, 149, 14, 36] [241, 173, 75, 93] [149, 56, 69, 121]
r a b
[126, 155, 134, 56] [77, 120, 235, 0] [51, 227, 109, 56]
r a b
[184, 108, 41, 231] [253, 86, 63, 170] [69, 58, 22, 77]
r a b
[210, 252, 26, 209] [216, 174, 142, 137] [10, 82, 148, 88]
r a b
[153, 28, 224, 110] [114, 228, 59, 104] [235, 248, 219, 6]
r a b
[127, 52, 223, 133] [19, 222, 227, 217] [108, 234, 60, 92]
r a b
[14, 19, 112, 188] [134, 59, 17, 216] [136, 40, 97, 100]
r a b
[253, 56, 88, 72] [151, 123, 208, 20] [106, 67, 136, 92]
r a b
[190, 151, 103, 125] [167, 37, 168, 173] [25, 178, 207, 208]
r a b
[81, 128, 94, 53] [122, 55, 28, 120] [43, 183, 66, 77]
r a b
[196, 97, 36, 13] [40, 104, 206, 231] [236, 9, 234, 234]
r a b
[97, 19, 48, 148] [28, 112, 245, 97] [125, 99, 197, 245]
r a b
[186, 216, 35, 114] [226, 145, 176, 217] [88, 73, 147, 171]
r a b
[223, 151, 83, 109] [128, 154, 29, 211] [95, 13, 78, 190]
r a b
[168, 117, 248, 103] [114, 248, 215, 37] [218, 141, 47, 66]
r a b
[166, 66, 68, 133] [1, 207, 67, 148] [167, 141, 7, 17]
r a b
[52, 156, 122, 29] [48, 200, 71, 42] [4, 84, 61, 55]
r a b
[152, 103, 235, 185] [237, 35, 8, 74] [117, 68, 227, 243]
r a b
[65, 159, 39, 159] [225, 174, 149, 122] [160, 49, 178, 229]
r a b
[109, 149, 184, 80] [139, 216, 252, 34] [230, 77, 68, 114]
r a b
[142, 41, 7, 105] [178, 156, 168, 140] [60, 181, 175, 229]
r a b
[248, 225, 172, 99] [252, 35, 241, 29] [4, 194, 93, 126]
r a b
[28, 98, 35, 122] [53, 204, 151, 156] [41, 174, 180, 230]
r a b
[178, 175, 41, 112] [159, 130, 222, 10] [45, 45, 247, 122]
r a b
[154, 63, 140, 104] [149, 172, 90, 6] [15, 147, 214, 110]
r a b
[43, 250, 209, 229] [89, 143, 211, 221] [114, 117, 2, 56]
r a b
[231, 98, 80, 94] [25, 233, 129, 175] [254, 139, 209, 241]
r a b
[233, 79, 86, 65] [252, 3, 18, 253] [21, 76, 68, 188]
r a b
[214, 2, 39, 1] [211, 94, 92, 91] [5, 92, 123, 90]
r a b
[208, 178, 109, 109] [14, 56, 173, 254] [222, 138, 192, 147]
r a b
[59, 223, 236, 120] [249, 204, 82, 214] [194, 19, 190, 174]
r a b
[18, 1, 172, 147] [207, 160, 93, 211] [221, 161, 241, 64]
r a b
[171, 77, 40, 239] [206, 103, 0, 87] [101, 42, 40, 184]
r a b
[206, 224, 235, 53] [110, 203, 207, 33] [160, 43, 36, 20]
r a b
[132, 191, 211, 0] [197, 140, 129, 56] [65, 51, 82, 56]
r a b
[179, 6, 96, 247] [36, 196, 93, 148] [151, 194, 61, 99]
r a b
[155, 239, 69, 210] [115, 11, 46, 22] [232, 228, 107, 196]
r a b
[49, 234, 203, 80] [208, 12, 9, 245] [225, 230, 194, 165]
r a b
[189, 214, 209, 197] [133, 23, 50, 247] [56, 193, 227, 50]
r a b
[85, 180, 134, 247] [103, 49, 151, 85] [50, 133, 17, 162]
r a b
[1, 40, 225, 146] [162, 236, 11, 118] [163, 196, 234, 228]
r a b
[111, 128, 152, 28] [106, 54, 178, 102] [5, 182, 42, 122]
r a b
[118, 129, 205, 80] [215, 254, 139, 203] [161, 127, 70, 155]
r a b
[113, 97, 37, 133] [152, 18, 133, 255] [233, 115, 160, 122]
r a b
[152, 202, 147, 128] [128, 41, 251, 6] [24, 227, 104, 134]
r a b
[68, 223, 171, 161] [176, 155, 170, 241] [244, 68, 1, 80]
r a b
[92, 105, 242, 142] [53, 174, 19, 40] [105, 199, 225, 166]
r a b
[70, 239, 134, 140] [182, 124, 2, 27] [240, 147, 132, 151]
r a b
[126, 243, 29, 248] [199, 104, 15, 202] [185, 155, 18, 50]
r a b
[102, 91, 68, 180] [190, 39, 254, 94] [216, 124, 186, 234]


#MYRESULTS
sage: ig = InvGen("Traces_ICSE2012/AES/Nested/aes_word_xor.tc");  _ =  ig.getInvs(invtype='nested',seed=1)
*** InvGen ***
Wed May 30 13:44:59 2012
Sage Version 4.8, Release Date: 2012-01-20
Godel.local Darwin 10.8.0 x86_64
*** ReadFile ***
read 'Traces_ICSE2012/AES/Nested/aes_word_xor.tc'
number of traces (tcs) read: 100
read 'Traces_ICSE2012/AES/Nested/aes_word_xor.ext'
0. |tcs|: 100
1. |tcs2|: 0
2. vs: [a, b, rvu]
3. xinfo: 
 0. All: ['a', 'b', 'rvu']
 1. Assume: []
 2. Const: []
 3. Expect: ['r[i] = xor2(a[i],b[i])']
 4. ExtFun: ['xor', 'add', 'mod255']
 5. Global: []
 6. Input: ['a', 'b']
 7. Output: ['rvu']
Time elapsed: 0.0574 s (ReadFile)
seed 1 (test 0.829402 0.595912 0.429361)
sample_traces: chose |tcs1|=1, |tcs2|=99 (attempted 1/100 tcs)
Time elapsed: 0.0001 s (function sample_traces)
*** NestedArray ***
* createExtFuns: ext funs ['xor', 'add', 'mod255']
* getExtFunReps(['xor', 'add', 'mod255'],|avals|=8,doCartesianProd=False)
* fun: xor, fvals 226, idxs 336
* fun: add, fvals 190, idxs 296
* fun: mod255, fvals 124, idxs 139
0. All: ['a', 'b', 'rvu']
1. Assume: []
2. Const: []
3. Expect: ['r[i] = xor2(a[i],b[i])']
4. ExtFun: ['xor', 'add', 'mod255']
5. Global: []
6. Input: ['a', 'b']
7. Output: ['rvu']
8. ZDims: 
 0. a: 1
 1. add: 2
 2. b: 1
 3. mod255: 1
 4. rvu: 1
 5. xor: 2
Generate Nestings
* gen_aexps [a,b,xor,mod255,add,rvu]: 10 expressions generated
* Find valid nestings using reachability analysis
0. rvu[i1] == xor(a[(i1)_],b[(i1)_]) has 1 relation(s)
lambda rvu,a,b,xor,i1: rvu[i1] == xor(a[i1],b[i1])
1. rvu[i1] == xor(a[(i1)_],mod255(b[(i1)_])) has 1 relation(s)
lambda rvu,a,b,xor,mod255,i1: rvu[i1] == xor(a[i1],mod255(b[i1]))
2. rvu[i1] == xor(b[(i1)_],a[(i1)_]) has 1 relation(s)
lambda rvu,a,b,xor,i1: rvu[i1] == xor(b[i1],a[i1])
3. rvu[i1] == xor(b[(i1)_],mod255(a[(i1)_])) has 1 relation(s)
lambda rvu,a,b,xor,mod255,i1: rvu[i1] == xor(b[i1],mod255(a[i1]))
4. rvu[i1] == xor(mod255(a[(i1)_]),b[(i1)_]) has 1 relation(s)
lambda rvu,a,b,xor,mod255,i1: rvu[i1] == xor(mod255(a[i1]),b[i1])
5. rvu[i1] == xor(mod255(a[(i1)_]),mod255(b[(i1)_])) has 1 relation(s)
lambda rvu,a,b,xor,mod255,i1: rvu[i1] == xor(mod255(a[i1]),mod255(b[i1]))
6. rvu[i1] == xor(mod255(b[(i1)_]),a[(i1)_]) has 1 relation(s)
lambda rvu,a,b,xor,mod255,i1: rvu[i1] == xor(mod255(b[i1]),a[i1])
7. rvu[i1] == xor(mod255(b[(i1)_]),mod255(a[(i1)_])) has 1 relation(s)
lambda rvu,a,b,xor,mod255,i1: rvu[i1] == xor(mod255(b[i1]),mod255(a[i1]))
8. rvu[i1] == mod255(xor(a[(i1)_],b[(i1)_])) has 1 relation(s)
lambda rvu,a,b,xor,mod255,i1: rvu[i1] == mod255(xor(a[i1],b[i1]))
9. rvu[i1] == mod255(xor(b[(i1)_],a[(i1)_])) has 1 relation(s)
lambda rvu,a,b,xor,mod255,i1: rvu[i1] == mod255(xor(b[i1],a[i1]))
* Relations: 10
Time elapsed: 0.1638 s (solve)
Refine 10 candidate invariants
* rfilter(|ps|=10,|tcs|=100)
rfilter (before 10, after 6, diff 4)
Time elapsed: 0.2469 s (refine)
Detected Invariants for NestedArray:
  0: lambda rvu,a,b,xor,i1: rvu[i1] == xor(a[i1],b[i1])
  1: lambda rvu,a,b,xor,i1: rvu[i1] == xor(b[i1],a[i1])
  2: lambda rvu,a,b,xor,mod255,i1: rvu[i1] == xor(a[i1],mod255(b[i1]))
  3: lambda rvu,a,b,xor,mod255,i1: rvu[i1] == xor(mod255(b[i1]),a[i1])
  4: lambda rvu,a,b,xor,mod255,i1: rvu[i1] == mod255(xor(a[i1],b[i1]))
  5: lambda rvu,a,b,xor,mod255,i1: rvu[i1] == mod255(xor(b[i1],a[i1]))

All the above results are *CORRECT* because mod(x,255) = x is x is within 255